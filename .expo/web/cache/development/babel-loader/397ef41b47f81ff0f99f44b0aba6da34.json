{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport AppLoading from \"expo-app-loading\";\nimport * as Font from \"expo-font\";\nimport { RFValue } from \"react-native-responsive-fontsize\";\nimport DropDownPicker from \"react-native-dropdown-picker\";\nvar customFonts = {\n  \"chalkboard\": require(\"../assets/fonts/Chalkboard.ttf\"),\n  \"MoonDance\": require(\"../assets/fonts/MoonDance-Regular.ttf\")\n};\n\nvar CreateStory = function (_React$Component) {\n  _inherits(CreateStory, _React$Component);\n\n  var _super = _createSuper(CreateStory);\n\n  function CreateStory(props) {\n    var _this;\n\n    _classCallCheck(this, CreateStory);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      fontsLoaded: false,\n      stateholder: \"Image1\"\n    };\n    return _this;\n  }\n\n  _createClass(CreateStory, [{\n    key: \"_loadFontsAsync\",\n    value: function _loadFontsAsync() {\n      return _regeneratorRuntime.async(function _loadFontsAsync$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Font.loadAsync(customFonts));\n\n            case 2:\n              this.setState({\n                fontsLoaded: true\n              });\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._loadFontsAsync();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      if (!this.state.fontsLoaded) {\n        return React.createElement(AppLoading, null);\n      } else {\n        var imageslst = {\n          \"Image1\": require(\"../assets/story_image_1.png\"),\n          \"Image2\": require(\"../assets/story_image_2.png\"),\n          \"Image3\": require(\"../assets/story_image_3.png\"),\n          \"Image4\": require(\"../assets/story_image_4.png\"),\n          \"Image5\": require(\"../assets/story_image_5.png\")\n        };\n        return React.createElement(View, {\n          style: styles.container\n        }, React.createElement(View, {\n          style: styles.appIcon\n        }, React.createElement(Image, {\n          source: require(\"../assets/maillogo.png\"),\n          style: styles.iconImage\n        }), React.createElement(Text, {\n          style: styles.appTitleText\n        }, \"Creat A new Story\")), React.createElement(ScrollView, null, React.createElement(Image, {\n          source: imageslst[this.state.stateholder],\n          style: styles.previewImage\n        }), React.createElement(View, null, React.createElement(DropDownPicker, {\n          items: [{\n            label: 'Image1',\n            value: 'Image1'\n          }, {\n            label: 'Image2',\n            value: 'Image2'\n          }, {\n            label: 'Image3',\n            value: 'Image3'\n          }, {\n            label: 'Image4',\n            value: 'Image4'\n          }, {\n            label: 'Image5',\n            value: 'Image5'\n          }],\n          labelStyle: {\n            color: 'white'\n          },\n          defaultValue: this.state.stateholder,\n          style: {\n            backgroundColor: \"transparent\"\n          },\n          dropDownStyle: {\n            backgroundColor: \"#15193c\"\n          },\n          onChangeItem: function onChangeItem(item) {\n            return _this2.setState({\n              stateholder: item.value\n            });\n          }\n        })), React.createElement(TextInput, {\n          style: [styles.inputFont, styles.inputFontExtra, styles.inputTextBig],\n          onChangeText: function onChangeText(title) {\n            return _this2.setState({\n              title: title\n            });\n          },\n          placeholder: \"Title\",\n          placeholderTextColor: \"white\"\n        }), React.createElement(TextInput, {\n          style: [styles.inputFont, styles.inputFontExtra, styles.inputTextBig],\n          onChangeText: function onChangeText(description) {\n            return _this2.setState({\n              description: description\n            });\n          },\n          placeholder: \"Description\",\n          multiline: true,\n          numberOfLines: 4,\n          placeholderTextColor: \"white\"\n        }), React.createElement(TextInput, {\n          style: [styles.inputFont, styles.inputFontExtra, styles.inputTextBig],\n          onChangeText: function onChangeText(story) {\n            return _this2.setState({\n              story: story\n            });\n          },\n          placeholder: \"Story\",\n          multiline: true,\n          numberOfLines: 20,\n          placeholderTextColor: \"white\"\n        }), React.createElement(TextInput, {\n          style: [styles.inputFont, styles.inputFontExtra, styles.inputTextBig],\n          onChangeText: function onChangeText(moral) {\n            return _this2.setState({\n              moral: moral\n            });\n          },\n          placeholder: \"Moral of the story\",\n          multiline: true,\n          numberOfLines: 4,\n          placeholderTextColor: \"white\"\n        })));\n      }\n    }\n  }]);\n\n  return CreateStory;\n}(React.Component);\n\nexport { CreateStory as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#15193c\"\n  },\n  appTitle: {\n    flex: 0.07,\n    flexDirection: \"row\"\n  },\n  appIcon: {\n    flex: 0.3,\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  iconImage: {\n    width: \"100%\",\n    height: \"100%\",\n    resizeMode: \"contain\"\n  },\n  appTitleTextContainer: {\n    flex: 0.7,\n    justifyContent: \"center\"\n  },\n  appTitleText: {\n    color: \"white\",\n    fontSize: RFValue(25),\n    fontFamily: \"chalkboard\",\n    marginTop: 20\n  },\n  cardContainer: {\n    flex: 0.93\n  },\n  storyAuthorText: {\n    fontSize: RFValue(18),\n    fontFamily: 'MoonDance',\n    color: 'white'\n  },\n  descriptionText: {\n    fontFamily: 'MoonDance',\n    fontSize: 13,\n    color: 'white',\n    paddingTop: RFValue(10)\n  },\n  previewImage: {\n    width: \"93%\",\n    height: RFValue(250),\n    alignSelf: \"center\",\n    borderRadius: RFValue(10),\n    marginVertical: RFValue(1),\n    resizeMode: \"contain\"\n  },\n  inputFont: {\n    height: RFValue(40),\n    borderColor: \"white\",\n    borderWidth: RFValue(1),\n    borderRadius: RFValue(10),\n    paddingLeft: RFValue(10),\n    color: \"white\",\n    fontFamily: \"Moon-Dance\"\n  },\n  inputFontExtra: {\n    marginTop: RFValue(10)\n  },\n  inputTextBig: {\n    textAlignVertical: \"top\",\n    padding: RFValue(5)\n  }\n});","map":{"version":3,"sources":["/Volumes/Coding/NPM/Class Projects/C-83/screens/CreateStory.js"],"names":["React","Component","AppLoading","Font","RFValue","DropDownPicker","customFonts","require","CreateStory","props","state","fontsLoaded","stateholder","loadAsync","setState","_loadFontsAsync","imageslst","styles","container","appIcon","iconImage","appTitleText","previewImage","label","value","color","backgroundColor","item","inputFont","inputFontExtra","inputTextBig","title","description","story","moral","StyleSheet","create","flex","appTitle","flexDirection","justifyContent","alignItems","width","height","resizeMode","appTitleTextContainer","fontSize","fontFamily","marginTop","cardContainer","storyAuthorText","descriptionText","paddingTop","alignSelf","borderRadius","marginVertical","borderColor","borderWidth","paddingLeft","textAlignVertical","padding"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n  View,\r\n  Text,\r\n  StyleSheet,\r\n  SafeAreaView,\r\n  Platform,\r\n  StatusBar,\r\n  Image,\r\n  Dimensions,\r\n  ScrollView,\r\n  TextInput,\r\n} from \"react-native\";\r\n\r\nimport AppLoading from \"expo-app-loading\";\r\nimport * as Font from \"expo-font\";\r\nimport { RFValue } from \"react-native-responsive-fontsize\";\r\nimport DropDownPicker from \"react-native-dropdown-picker\";\r\n\r\nlet customFonts = {\r\n  \"chalkboard\": require(\"../assets/fonts/Chalkboard.ttf\"),\r\n  \"MoonDance\": require(\"../assets/fonts/MoonDance-Regular.ttf\")\r\n};\r\nexport default class CreateStory extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      fontsLoaded: false,\r\n      stateholder: \"Image1\"\r\n    };\r\n  }\r\n\r\n\r\n  async _loadFontsAsync() {\r\n    await Font.loadAsync(customFonts);\r\n    this.setState({ fontsLoaded: true });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this._loadFontsAsync();\r\n  }\r\n\r\n\r\n  render() {\r\n    if (!this.state.fontsLoaded) {\r\n      return <AppLoading />;\r\n    }\r\n    else {\r\n      let imageslst = {\r\n        \"Image1\": require(\"../assets/story_image_1.png\"),\r\n        \"Image2\": require(\"../assets/story_image_2.png\"),\r\n        \"Image3\": require(\"../assets/story_image_3.png\"),\r\n        \"Image4\": require(\"../assets/story_image_4.png\"),\r\n        \"Image5\": require(\"../assets/story_image_5.png\")\r\n      }\r\n      return (\r\n        <View style={styles.container}>\r\n            <View style={styles.appIcon}>\r\n              <Image\r\n                source={require(\"../assets/maillogo.png\")}\r\n                style={styles.iconImage}\r\n              ></Image>\r\n              <Text style={styles.appTitleText}>Creat A new Story</Text>\r\n            </View>\r\n            <ScrollView >\r\n              <Image source={imageslst[this.state.stateholder]} style={styles.previewImage} />\r\n              <View >\r\n                <DropDownPicker items={[\r\n                  {label: 'Image1', value: 'Image1'},\r\n                  {label: 'Image2', value: 'Image2'},\r\n                  {label: 'Image3', value: 'Image3'}, \r\n                  {label: 'Image4', value: 'Image4'},\r\n                  {label: 'Image5', value: 'Image5'} \r\n                ]} labelStyle={{color: 'white',}}\r\n                defaultValue={ this.state.stateholder} \r\n                style = {{backgroundColor:\"transparent\"}}\r\n                dropDownStyle = {{backgroundColor:\"#15193c\"}}\r\n                onChangeItem={item => this.setState({stateholder:item.value})}/>\r\n              </View>\r\n              <TextInput\r\n                style={[styles.inputFont,styles.inputFontExtra,\r\n                  styles.inputTextBig]}\r\n                onChangeText={title => this.setState({ title })}\r\n                placeholder={\"Title\"}\r\n                placeholderTextColor=\"white\"\r\n              />\r\n\r\n              <TextInput\r\n                style={[\r\n                  styles.inputFont,\r\n                  styles.inputFontExtra,\r\n                  styles.inputTextBig\r\n                ]}\r\n                onChangeText={description => this.setState({ description })}\r\n                placeholder={\"Description\"}\r\n                multiline={true}\r\n                numberOfLines={4}\r\n                placeholderTextColor=\"white\"\r\n              />\r\n              <TextInput\r\n                style={[\r\n                  styles.inputFont,\r\n                  styles.inputFontExtra,\r\n                  styles.inputTextBig\r\n                ]}\r\n                onChangeText={story => this.setState({ story })}\r\n                placeholder={\"Story\"}\r\n                multiline={true}\r\n                numberOfLines={20}\r\n                placeholderTextColor=\"white\"\r\n              />\r\n\r\n              <TextInput\r\n                style={[\r\n                  styles.inputFont,\r\n                  styles.inputFontExtra,\r\n                  styles.inputTextBig\r\n                ]}\r\n                onChangeText={moral => this.setState({ moral })}\r\n                placeholder={\"Moral of the story\"}\r\n                multiline={true}\r\n                numberOfLines={4}\r\n                placeholderTextColor=\"white\"\r\n              />\r\n            </ScrollView>\r\n        </View>\r\n      );\r\n    }\r\n\r\n  }\r\n\r\n\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: \"#15193c\"\r\n  },\r\n  appTitle: {\r\n    flex: 0.07,\r\n    flexDirection: \"row\"\r\n  },\r\n  appIcon: {\r\n    flex: 0.3,\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\"\r\n  },\r\n  iconImage: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    resizeMode: \"contain\"\r\n  },\r\n  appTitleTextContainer: {\r\n    flex: 0.7,\r\n    justifyContent: \"center\"\r\n  },\r\n  appTitleText: {\r\n    color: \"white\",\r\n    fontSize: RFValue(25),\r\n    fontFamily: \"chalkboard\",\r\n    marginTop: 20,\r\n  },\r\n  cardContainer: {\r\n    flex: 0.93\r\n  },\r\n  storyAuthorText:\r\n  {\r\n    fontSize: RFValue(18),\r\n    fontFamily: 'MoonDance',\r\n    color: 'white',\r\n  },\r\n  descriptionText:\r\n  {\r\n    fontFamily: 'MoonDance',\r\n    fontSize: 13,\r\n    color: 'white',\r\n    paddingTop: RFValue(10),\r\n  },\r\n  previewImage: {\r\n    width: \"93%\",\r\n    height: RFValue(250),\r\n    alignSelf: \"center\",\r\n    borderRadius: RFValue(10),\r\n    marginVertical: RFValue(1),\r\n    resizeMode: \"contain\"\r\n  },\r\n  inputFont: {\r\n    height: RFValue(40),\r\n    borderColor: \"white\",\r\n    borderWidth: RFValue(1),\r\n    borderRadius: RFValue(10),\r\n    paddingLeft: RFValue(10),\r\n    color: \"white\",\r\n    fontFamily: \"Moon-Dance\"\r\n  },\r\n  inputFontExtra: {\r\n    marginTop: RFValue(10)\r\n  },\r\n  inputTextBig: {\r\n    textAlignVertical: \"top\",\r\n    padding: RFValue(5)\r\n  }\r\n});\r\n\r\n"]},"metadata":{},"sourceType":"module"}