{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport AppLoading from \"expo-app-loading\";\nimport * as Font from \"expo-font\";\nimport { RFValue } from \"react-native-responsive-fontsize\";\nvar customFonts = {\n  \"Bubblegum-Sans\": require(\"../assets/fonts/BubblegumSans-Regular.ttf\"),\n  \"MoonDance\": require(\"../assets/fonts/MoonDance-Regular.ttf\")\n};\n\nvar StoryCard = function (_Component) {\n  _inherits(StoryCard, _Component);\n\n  var _super = _createSuper(StoryCard);\n\n  function StoryCard(props) {\n    var _this;\n\n    _classCallCheck(this, StoryCard);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      fontsLoaded: false\n    };\n    return _this;\n  }\n\n  _createClass(StoryCard, [{\n    key: \"_loadFontsAsync\",\n    value: function _loadFontsAsync() {\n      return _regeneratorRuntime.async(function _loadFontsAsync$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Font.loadAsync(customFonts));\n\n            case 2:\n              this.setState({\n                fontsLoaded: true\n              });\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._loadFontsAsync();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (!this.state.fontsLoaded) {\n        return React.createElement(AppLoading, null);\n      } else {\n        return React.createElement(View, null, React.createElement(View, {\n          style: styles.container\n        }, React.createElement(Text, {\n          style: {\n            color: \"white\"\n          }\n        }, \"Story Card!\")), React.createElement(View, {\n          style: styles.container\n        }, React.createElement(Image, {\n          source: require(\"../assets/story_image_1.png\")\n        }), React.createElement(Text, {\n          style: styles.appTitleText\n        }, this.props.story.title), React.createElement(Text, {\n          style: styles.storyAuthorText\n        }, this.props.story.author), React.createElement(Text, {\n          style: styles.descriptionText\n        }, this.props.story.description)));\n      }\n    }\n  }]);\n\n  return StoryCard;\n}(Component);\n\nexport { StoryCard as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#15193c\"\n  },\n  appTitle: {\n    flex: 0.07,\n    flexDirection: \"row\"\n  },\n  appIcon: {\n    flex: 0.3,\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  iconImage: {\n    width: \"100%\",\n    height: \"100%\",\n    resizeMode: \"contain\"\n  },\n  appTitleTextContainer: {\n    flex: 0.7,\n    justifyContent: \"center\"\n  },\n  appTitleText: {\n    color: \"white\",\n    fontSize: RFValue(28),\n    fontFamily: \"Bubblegum-Sans\"\n  },\n  cardContainer: {\n    flex: 0.93\n  },\n  storyAuthorText: {\n    fontSize: RFValue(18),\n    fontFamily: 'MoonDance',\n    color: 'white'\n  },\n  descriptionText: {\n    fontFamily: 'MoonDance',\n    fontSize: 13,\n    color: 'white',\n    paddingTop: RFValue(10)\n  }\n});","map":{"version":3,"sources":["/Volumes/Coding/NPM/Class Projects/C-83/screens/StoryCard.js"],"names":["React","Component","AppLoading","Font","RFValue","customFonts","require","StoryCard","props","state","fontsLoaded","loadAsync","setState","_loadFontsAsync","styles","container","color","appTitleText","story","title","storyAuthorText","author","descriptionText","description","StyleSheet","create","flex","backgroundColor","appTitle","flexDirection","appIcon","justifyContent","alignItems","iconImage","width","height","resizeMode","appTitleTextContainer","fontSize","fontFamily","cardContainer","paddingTop"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  View,\n  Text,\n  StyleSheet,\n  SafeAreaView,\n  Platform,\n  StatusBar,\n  Image,\n  Dimensions,\n} from \"react-native\";\n\nimport AppLoading from \"expo-app-loading\";\nimport * as Font from \"expo-font\";\nimport { RFValue } from \"react-native-responsive-fontsize\";\n\nlet customFonts = {\n  \"Bubblegum-Sans\": require(\"../assets/fonts/BubblegumSans-Regular.ttf\"),\n  \"MoonDance\" : require(\"../assets/fonts/MoonDance-Regular.ttf\")\n};\n\nexport default class StoryCard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      fontsLoaded: false\n    };\n  }\n\n  async _loadFontsAsync() {\n    await Font.loadAsync(customFonts);\n    this.setState({ fontsLoaded: true });\n  }\n\n  componentDidMount() {\n    this._loadFontsAsync();\n  }\n\n  render() {\n    if (!this.state.fontsLoaded) {\n      return <AppLoading />;\n    } else {\n      return (\n\n        <View>\n          <View style={styles.container}>\n            <Text style={{ color: \"white\" }}>Story Card!</Text>\n          </View>\n          <View style={styles.container}>\n            <Image source = {require('../assets/story_image_1.png')} />\n            <Text style = {styles.appTitleText}>{this.props.story.title}</Text>\n            <Text style = {styles.storyAuthorText}>{this.props.story.author}</Text>\n            <Text style = {styles.descriptionText}>{this.props.story.description}</Text>\n          </View>\n        </View>\n      );\n    }\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#15193c\"\n  },\n  appTitle: {\n    flex: 0.07,\n    flexDirection: \"row\"\n  },\n  appIcon: {\n    flex: 0.3,\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  iconImage: {\n    width: \"100%\",\n    height: \"100%\",\n    resizeMode: \"contain\"\n  },\n  appTitleTextContainer: {\n    flex: 0.7,\n    justifyContent: \"center\"\n  },\n  appTitleText: {\n    color: \"white\",\n    fontSize: RFValue(28),\n    fontFamily: \"Bubblegum-Sans\"\n  },\n  cardContainer: {\n    flex: 0.93\n  },\n  storyAuthorText: \n  { fontSize: RFValue(18), \n    fontFamily: 'MoonDance', \n    color: 'white', \n  }, \n  descriptionText: \n  { fontFamily: 'MoonDance', \n  fontSize: 13, \n  color: 'white', \n  paddingTop: RFValue(10), \n}\n});\n\n"]},"metadata":{},"sourceType":"module"}