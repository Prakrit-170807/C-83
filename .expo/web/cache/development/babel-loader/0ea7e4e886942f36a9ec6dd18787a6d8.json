{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { RFValue } from \"react-native-responsive-fontsize\";\nimport StoryCard from \"./StoryCard\";\nimport AppLoading from \"expo-app-loading\";\nimport * as Font from \"expo-font\";\nimport { FlatList } from \"react-native-gesture-handler\";\nvar customFonts = {\n  \"Bubblegum-Sans\": require(\"../assets/fonts/BubblegumSans-Regular.ttf\")\n};\n\nvar stories = require(\"./tempstories.json\");\n\nvar Feed = function (_Component) {\n  _inherits(Feed, _Component);\n\n  var _super = _createSuper(Feed);\n\n  function Feed(props) {\n    var _this;\n\n    _classCallCheck(this, Feed);\n\n    _this = _super.call(this, props);\n\n    _this.renderItem = function (_ref) {\n      var story = _ref.item;\n      return React.createElement(StoryCard, {\n        story: story\n      });\n    };\n\n    _this.keyExtractor = function (item, index) {\n      return index.toString();\n    };\n\n    _this.state = {\n      fontsLoaded: false\n    };\n    return _this;\n  }\n\n  _createClass(Feed, [{\n    key: \"_loadFontsAsync\",\n    value: function _loadFontsAsync() {\n      return _regeneratorRuntime.async(function _loadFontsAsync$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Font.loadAsync(customFonts));\n\n            case 2:\n              this.setState({\n                fontsLoaded: true\n              });\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._loadFontsAsync();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (!this.state.fontsLoaded) {\n        return React.createElement(AppLoading, null);\n      } else {\n        return React.createElement(View, {\n          style: styles.container\n        }, React.createElement(View, {\n          style: styles.appTitle\n        }, React.createElement(View, {\n          style: styles.appIcon\n        }, React.createElement(Image, {\n          source: require(\"../assets/maillogo.png\"),\n          style: styles.iconImage\n        })), React.createElement(View, {\n          style: styles.appTitleTextContainer\n        }, React.createElement(Text, {\n          style: styles.appTitleText\n        }, \"Storytelling App\"))), React.createElement(View, {\n          style: styles.cardContainer\n        }, React.createElement(FlatList, {\n          keyExtractor: this.keyExtractor,\n          data: stories,\n          renderItem: this.renderItem\n        })));\n      }\n    }\n  }]);\n\n  return Feed;\n}(Component);\n\nexport { Feed as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#15193c\"\n  },\n  droidSafeArea: {\n    marginTop: Platform.OS === \"android\" ? StatusBar.currentHeight : RFValue(35)\n  },\n  appTitle: {\n    flex: 0.07,\n    flexDirection: \"row\"\n  },\n  appIcon: {\n    flex: 0.3,\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  iconImage: {\n    width: \"100%\",\n    height: \"100%\",\n    resizeMode: \"contain\"\n  },\n  appTitleTextContainer: {\n    flex: 0.7,\n    justifyContent: \"center\"\n  },\n  appTitleText: {\n    color: \"white\",\n    fontSize: RFValue(28),\n    fontFamily: \"Bubblegum-Sans\"\n  },\n  cardContainer: {\n    flex: 0.93\n  }\n});","map":{"version":3,"sources":["/Volumes/Coding/NPM/Class Projects/C-83/screens/Feed.js"],"names":["React","Component","RFValue","StoryCard","AppLoading","Font","FlatList","customFonts","require","stories","Feed","props","renderItem","story","item","keyExtractor","index","toString","state","fontsLoaded","loadAsync","setState","_loadFontsAsync","styles","container","appTitle","appIcon","iconImage","appTitleTextContainer","appTitleText","cardContainer","StyleSheet","create","flex","backgroundColor","droidSafeArea","marginTop","Platform","OS","StatusBar","currentHeight","flexDirection","justifyContent","alignItems","width","height","resizeMode","color","fontSize","fontFamily"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  View,\n  Text,\n  StyleSheet,\n  SafeAreaView,\n  Platform,\n  StatusBar,\n  Image\n} from \"react-native\";\nimport { RFValue } from \"react-native-responsive-fontsize\";\nimport StoryCard from \"./StoryCard\";\n\nimport AppLoading from \"expo-app-loading\";\nimport * as Font from \"expo-font\";\nimport { FlatList } from \"react-native-gesture-handler\";\n\nlet customFonts = {\n  \"Bubblegum-Sans\": require(\"../assets/fonts/BubblegumSans-Regular.ttf\")\n};\n\nlet stories = require(\"./tempstories.json\");\n\nexport default class Feed extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      fontsLoaded: false\n    };\n  }\n\n  async _loadFontsAsync() {\n    await Font.loadAsync(customFonts);\n    this.setState({ fontsLoaded: true });\n  }\n\n  componentDidMount() {\n    this._loadFontsAsync();\n  }\n\n  renderItem = ({ item: story }) => {\n    return <StoryCard story={story} />;\n  };\n\n  keyExtractor = (item, index) => index.toString();\n\n\n  render() {\n    if (!this.state.fontsLoaded) {\n      return <AppLoading />;\n    } else {\n      return (\n        <View style={styles.container}>\n          <View style={styles.appTitle}>\n            <View style={styles.appIcon}>\n              <Image\n                source={require(\"../assets/maillogo.png\")}\n                style={styles.iconImage}\n              ></Image>\n            </View>\n            <View style={styles.appTitleTextContainer}>\n              <Text style={styles.appTitleText}>Storytelling App</Text>\n            </View>\n          </View>\n          <View style={styles.cardContainer}>\n            <FlatList\n              keyExtractor={this.keyExtractor}\n              data={stories}\n              renderItem={this.renderItem}\n            />\n          </View>\n        </View>\n      );\n    }\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#15193c\"\n  },\n  droidSafeArea: {\n    marginTop: Platform.OS === \"android\" ? StatusBar.currentHeight : RFValue(35)\n  },\n  appTitle: {\n    flex: 0.07,\n    flexDirection: \"row\"\n  },\n  appIcon: {\n    flex: 0.3,\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  iconImage: {\n    width: \"100%\",\n    height: \"100%\",\n    resizeMode: \"contain\"\n  },\n  appTitleTextContainer: {\n    flex: 0.7,\n    justifyContent: \"center\"\n  },\n  appTitleText: {\n    color: \"white\",\n    fontSize: RFValue(28),\n    fontFamily: \"Bubblegum-Sans\"\n  },\n  cardContainer: {\n    flex: 0.93\n  }\n});"]},"metadata":{},"sourceType":"module"}